"use client"

import {
  Box,
  Badge,
  Card,
  CardBody,
  Flex,
  Heading,
  Text,
  Image,
  VStack,
  HStack,
  useColorModeValue,
} from "@chakra-ui/react"
import { StarIcon } from "@chakra-ui/icons"
import { FiCheck } from "react-icons/fi"

function ProductTile({ product, isSelected, onToggleSelect, isMaxSelected }) {
  const canSelect = !isMaxSelected || isSelected
  const cardBg = useColorModeValue("white", "gray.800")
  const borderColor = useColorModeValue("gray.200", "gray.600")
  const checkboxBg = useColorModeValue("white", "gray.700")

  return (
    <Card
      bg={cardBg}
      borderWidth="1px"
      borderColor={borderColor}
      position="relative"
      overflow="hidden"
      transition="all 0.2s"
      _hover={{
        shadow: "lg",
        transform: "translateY(-2px)",
      }}
      role="group"
    >
      {/* Selection Checkbox */}
      <Box position="absolute" top="3" left="3" zIndex="10">
        <Box
          w="6"
          h="6"
          borderWidth="2px"
          borderRadius="md"
          borderColor={isSelected ? "blue.500" : canSelect ? "gray.300" : "gray.200"}
          bg={isSelected ? "blue.500" : canSelect ? checkboxBg : "gray.100"}
          color={isSelected ? "white" : "transparent"}
          cursor={canSelect ? "pointer" : "not-allowed"}
          opacity={canSelect ? 1 : 0.5}
          display="flex"
          alignItems="center"
          justifyContent="center"
          transition="all 0.2s"
          _hover={canSelect ? { borderColor: "blue.400" } : {}}
          onClick={() => canSelect && onToggleSelect(product.id)}
          aria-label={`${isSelected ? "Deselect" : "Select"} ${product.name} for comparison`}
        >
          {isSelected && <Box as={FiCheck} size="16px" />}
        </Box>
      </Box>

      <CardBody p="4">
        {/* Product Image */}
        <Box mb="4" overflow="hidden" borderRadius="lg">
          <Image
            src={product.image || "/placeholder.svg?height=200&width=200"}
            alt={product.name}
            w="full"
            h="200px"
            objectFit="cover"
            bg="gray.100"
            transition="transform 0.2s"
            _groupHover={{ transform: "scale(1.05)" }}
          />
        </Box>

        <VStack align="stretch" spacing="2">
          {/* Category Badge */}
          <Badge colorScheme="gray" size="sm" w="fit-content">
            {product.category}
          </Badge>

          {/* Product Name */}
          <Heading size="sm" noOfLines={2} minH="2.5rem">
            {product.name}
          </Heading>

          {/* Rating and Reviews */}
          <HStack spacing="1">
            <HStack spacing="0">
              {[...Array(5)].map((_, i) => (
                <StarIcon key={i} w="3" h="3" color={i < Math.floor(product.rating) ? "yellow.400" : "gray.300"} />
              ))}
            </HStack>
            <Text fontSize="xs" color="gray.600">
              ({product.reviews})
            </Text>
          </HStack>

          {/* Price */}
          <HStack spacing="2">
            <Text fontSize="lg" fontWeight="bold" color="blue.600">
              ${product.price}
            </Text>
            {product.originalPrice && (
              <Text fontSize="sm" color="gray.500" textDecoration="line-through">
                ${product.originalPrice}
              </Text>
            )}
          </HStack>

          {/* Features */}
          <Flex wrap="wrap" gap="1">
            {product.features.slice(0, 2).map((feature, index) => (
              <Badge key={index} variant="outline" fontSize="xs" colorScheme="blue">
                {feature}
              </Badge>
            ))}
            {product.features.length > 2 && (
              <Badge variant="outline" fontSize="xs" colorScheme="gray">
                +{product.features.length - 2} more
              </Badge>
            )}
          </Flex>
        </VStack>
      </CardBody>
    </Card>
  )
}

export default ProductTile
