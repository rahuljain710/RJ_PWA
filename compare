"use client"

import { useState } from "react"
import {
  Box,
  Button,
  Badge,
  Card,
  CardBody,
  Flex,
  Grid,
  Heading,
  Text,
  Image,
  IconButton,
  Drawer,
  DrawerBody,
  DrawerFooter,
  DrawerHeader,
  DrawerOverlay,
  DrawerContent,
  DrawerCloseButton,
  useDisclosure,
  VStack,
  HStack,
  Center,
  useColorModeValue,
} from "@chakra-ui/react"
import { CloseIcon, StarIcon } from "@chakra-ui/icons"
import { FiShoppingCart, FiCheck } from "react-icons/fi"

const sampleProducts = [
  {
    id: "1",
    name: "Wireless Bluetooth Headphones",
    price: 79.99,
    originalPrice: 99.99,
    image: "/placeholder.svg?height=200&width=200",
    rating: 4.5,
    reviews: 1234,
    category: "Electronics",
    features: ["Noise Cancelling", "30hr Battery", "Quick Charge"],
  },
  {
    id: "2",
    name: "Smart Fitness Watch",
    price: 199.99,
    image: "/placeholder.svg?height=200&width=200",
    rating: 4.3,
    reviews: 856,
    category: "Wearables",
    features: ["Heart Rate Monitor", "GPS", "Water Resistant"],
  },
  {
    id: "3",
    name: "Portable Bluetooth Speaker",
    price: 49.99,
    originalPrice: 69.99,
    image: "/placeholder.svg?height=200&width=200",
    rating: 4.7,
    reviews: 2103,
    category: "Electronics",
    features: ["360Â° Sound", "Waterproof", "12hr Battery"],
  },
  {
    id: "4",
    name: "Wireless Charging Pad",
    price: 29.99,
    image: "/placeholder.svg?height=200&width=200",
    rating: 4.2,
    reviews: 567,
    category: "Accessories",
    features: ["Fast Charging", "LED Indicator", "Universal Compatible"],
  },
  {
    id: "5",
    name: "USB-C Hub Adapter",
    price: 39.99,
    originalPrice: 54.99,
    image: "/placeholder.svg?height=200&width=200",
    rating: 4.4,
    reviews: 789,
    category: "Accessories",
    features: ["4K HDMI", "USB 3.0", "SD Card Reader"],
  },
  {
    id: "6",
    name: "Mechanical Gaming Keyboard",
    price: 129.99,
    image: "/placeholder.svg?height=200&width=200",
    rating: 4.6,
    reviews: 1456,
    category: "Gaming",
    features: ["RGB Backlight", "Cherry MX Switches", "Programmable Keys"],
  },
]

function ProductTile({ product, isSelected, onToggleSelect, isMaxSelected }) {
  const canSelect = !isMaxSelected || isSelected
  const cardBg = useColorModeValue("white", "gray.800")
  const borderColor = useColorModeValue("gray.200", "gray.600")

  return (
    <Card
      bg={cardBg}
      borderWidth="1px"
      borderColor={borderColor}
      position="relative"
      overflow="hidden"
      transition="all 0.2s"
      _hover={{
        shadow: "lg",
        transform: "translateY(-2px)",
      }}
    >
      {/* Selection Checkbox */}
      <Box position="absolute" top="3" left="3" zIndex="10">
        <Box
          w="6"
          h="6"
          borderWidth="2px"
          borderRadius="md"
          borderColor={isSelected ? "blue.500" : canSelect ? "gray.300" : "gray.200"}
          bg={isSelected ? "blue.500" : canSelect ? "white" : "gray.100"}
          color={isSelected ? "white" : "transparent"}
          cursor={canSelect ? "pointer" : "not-allowed"}
          opacity={canSelect ? 1 : 0.5}
          display="flex"
          alignItems="center"
          justifyContent="center"
          transition="all 0.2s"
          _hover={canSelect ? { borderColor: "blue.400" } : {}}
          onClick={() => canSelect && onToggleSelect(product.id)}
        >
          {isSelected && <Box as={FiCheck} size="16px" />}
        </Box>
      </Box>

      <CardBody p="4">
        <Box mb="4">
          <Image
            src={product.image || "/placeholder.svg"}
            alt={product.name}
            w="full"
            h="200px"
            objectFit="cover"
            borderRadius="lg"
            bg="gray.100"
            transition="transform 0.2s"
            _groupHover={{ transform: "scale(1.05)" }}
          />
        </Box>

        <VStack align="stretch" spacing="2">
          <Badge colorScheme="gray" size="sm" w="fit-content">
            {product.category}
          </Badge>

          <Heading size="sm" noOfLines={2} minH="2.5rem">
            {product.name}
          </Heading>

          <HStack spacing="1">
            <HStack spacing="0">
              {[...Array(5)].map((_, i) => (
                <StarIcon key={i} w="3" h="3" color={i < Math.floor(product.rating) ? "yellow.400" : "gray.300"} />
              ))}
            </HStack>
            <Text fontSize="xs" color="gray.600">
              ({product.reviews})
            </Text>
          </HStack>

          <HStack spacing="2">
            <Text fontSize="lg" fontWeight="bold">
              ${product.price}
            </Text>
            {product.originalPrice && (
              <Text fontSize="sm" color="gray.500" textDecoration="line-through">
                ${product.originalPrice}
              </Text>
            )}
          </HStack>

          <Flex wrap="wrap" gap="1">
            {product.features.slice(0, 2).map((feature, index) => (
              <Badge key={index} variant="outline" fontSize="xs">
                {feature}
              </Badge>
            ))}
            {product.features.length > 2 && (
              <Badge variant="outline" fontSize="xs">
                +{product.features.length - 2} more
              </Badge>
            )}
          </Flex>
        </VStack>
      </CardBody>
    </Card>
  )
}

function CompareButton({ count, onClick }) {
  return (
    <Box position="fixed" top="20" right="6" zIndex="50">
      <Button
        onClick={onClick}
        isDisabled={count === 0}
        colorScheme={count > 0 ? "blue" : "gray"}
        shadow="lg"
        borderRadius="full"
        px="4"
        py="2"
        transition="all 0.2s"
      >
        Compare ({count})
      </Button>
    </Box>
  )
}

function CompareFlyout({ isOpen, onClose, selectedProducts, onRemoveProduct, onClearAll }) {
  const canCompare = selectedProducts.length >= 2

  return (
    <Drawer isOpen={isOpen} placement="right" onClose={onClose} size="md">
      <DrawerOverlay />
      <DrawerContent>
        <DrawerCloseButton />
        <DrawerHeader>
          <Heading size="md">Compare Products</Heading>
        </DrawerHeader>

        <DrawerBody>
          {selectedProducts.length === 0 ? (
            <Center h="full">
              <VStack spacing="4" textAlign="center" color="gray.500">
                <Box as={FiShoppingCart} size="48px" color="gray.300" />
                <Text>No products selected for comparison</Text>
                <Text fontSize="sm">Select products from the grid to compare</Text>
              </VStack>
            </Center>
          ) : (
            <VStack spacing="4" align="stretch">
              {selectedProducts.map((product) => (
                <Card key={product.id} variant="outline">
                  <CardBody p="3">
                    <HStack spacing="3">
                      <Image
                        src={product.image || "/placeholder.svg"}
                        alt={product.name}
                        w="16"
                        h="16"
                        objectFit="cover"
                        borderRadius="md"
                      />
                      <VStack align="start" flex="1" spacing="1">
                        <Text fontSize="sm" fontWeight="medium" noOfLines={2}>
                          {product.name}
                        </Text>
                        <Text color="blue.600" fontWeight="semibold">
                          ${product.price}
                        </Text>
                      </VStack>
                      <IconButton
                        aria-label="Remove product"
                        icon={<CloseIcon />}
                        size="sm"
                        variant="ghost"
                        colorScheme="red"
                        onClick={() => onRemoveProduct(product.id)}
                      />
                    </HStack>
                  </CardBody>
                </Card>
              ))}
            </VStack>
          )}
        </DrawerBody>

        {selectedProducts.length > 0 && (
          <DrawerFooter>
            <VStack w="full" spacing="3">
              <Button
                colorScheme="blue"
                w="full"
                isDisabled={!canCompare}
                onClick={() => alert("Compare functionality would be implemented here")}
              >
                Compare Now ({selectedProducts.length})
              </Button>
              <Button variant="outline" w="full" onClick={onClearAll}>
                Clear All
              </Button>
              {!canCompare && selectedProducts.length === 1 && (
                <Text fontSize="xs" color="gray.500" textAlign="center">
                  Select at least 2 products to compare
                </Text>
              )}
            </VStack>
          </DrawerFooter>
        )}
      </DrawerContent>
    </Drawer>
  )
}

export default function ProductCompare() {
  const [selectedProducts, setSelectedProducts] = useState([])
  const { isOpen, onOpen, onClose } = useDisclosure()
  const maxSelection = 5
  const bgColor = useColorModeValue("gray.50", "gray.900")

  const handleToggleSelect = (productId) => {
    setSelectedProducts((prev) => {
      if (prev.includes(productId)) {
        return prev.filter((id) => id !== productId)
      } else if (prev.length < maxSelection) {
        return [...prev, productId]
      }
      return prev
    })
  }

  const handleRemoveProduct = (productId) => {
    setSelectedProducts((prev) => prev.filter((id) => id !== productId))
  }

  const handleClearAll = () => {
    setSelectedProducts([])
  }

  const selectedProductsData = sampleProducts.filter((product) => selectedProducts.includes(product.id))

  return (
    <Box minH="100vh" bg={bgColor} p="6">
      <Box maxW="7xl" mx="auto">
        {/* Header */}
        <Box mb="8">
          <Heading size="xl" color="gray.900" mb="2">
            Products
          </Heading>
          <Text color="gray.600">Select up to {maxSelection} products to compare their features and prices</Text>
        </Box>

        {/* Product Grid */}
        <Grid
          templateColumns={{
            base: "1fr",
            sm: "repeat(2, 1fr)",
            lg: "repeat(3, 1fr)",
            xl: "repeat(4, 1fr)",
          }}
          gap="6"
        >
          {sampleProducts.map((product) => (
            <ProductTile
              key={product.id}
              product={product}
              isSelected={selectedProducts.includes(product.id)}
              onToggleSelect={handleToggleSelect}
              isMaxSelected={selectedProducts.length >= maxSelection}
            />
          ))}
        </Grid>

        {/* Compare Button */}
        <CompareButton count={selectedProducts.length} onClick={onOpen} />

        {/* Compare Flyout */}
        <CompareFlyout
          isOpen={isOpen}
          onClose={onClose}
          selectedProducts={selectedProductsData}
          onRemoveProduct={handleRemoveProduct}
          onClearAll={handleClearAll}
        />
      </Box>
    </Box>
  )
}
